<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>User Profile - Anonymous Tales</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .profile-header {
            text-align: center;
            padding: 20px;
            background-color: #ffffff;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .profile-header img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
        }

        .profile-header h2 {
            margin-top: 15px;
            font-size: 2rem;
        }

        .profile-header p {
            color: #6c757d;
            font-size: 1rem;
        }

        .profile-timeline {
            background-color: #ffffff;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .timeline-post {
            padding: 20px;
            background: white;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .timeline-post img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 15px;
            object-fit: cover;
        }

        .timeline-post .post-content {
            flex-grow: 1;
        }

        .timeline-post .post-author {
            font-weight: bold;
        }

        .timeline-post .post-date {
            color: #6c757d;
            font-size: 0.9em;
        }
    </style>
  </head>
  <body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-body-tertiary">
      <div class="container">
        <a class="navbar-brand me-2" href="#">
          <i class="bi bi-journal-bookmark"></i> A.Tales
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarButtonsExample" aria-controls="navbarButtonsExample" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarButtonsExample">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link" href="#">
                <i class="bi bi-house-door"></i> Home
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">
                <i class="bi bi-person"></i> Profile
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">
                <i class="bi bi-chat-dots"></i> Chat
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">
                <i class="bi bi-bell"></i> Notifications
              </a>
            </li>
          </ul>
          <div class="d-flex align-items-center">
            <span id="user-name" class="me-3"></span>
            <button id="logout" type="button" class="btn btn-danger">
              <i class="bi bi-box-arrow-right"></i> Logout
            </button>
          </div>
        </div>
      </div>
    </nav>

    <!-- Profile Header Section -->
    <div class="container mt-4">
      <div class="profile-header">
        <img src="https://via.placeholder.com/120" alt="Profile Picture">
        <h2 id="user-fullname">John Doe</h2>
        <p id="user-bio">This is a brief bio about the user. It can be longer and more detailed.</p>
      </div>

      <!-- Timeline Section -->
      <div class="profile-timeline">
        <h3>My Posts</h3>
        <div id="timeline-posts">
          <!-- Timeline posts will be injected here by JavaScript -->
        </div>
      </div>
    </div>

    <footer class="text-center mt-4">
      <p>&copy; 2024 AnonymousTales. All rights reserved.</p>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <script>
        // Function to decode JWT token
        function parseJwt(token) {
          const base64Url = token.split('.')[1];
          const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
          return JSON.parse(atob(base64));
        }

        // Retrieve the token from localStorage
        const token = localStorage.getItem('authToken');

        if (token) {
          // Decode the token to get user data
          const userData = parseJwt(token);

          // Display the user's information in the profile header
          document.getElementById('user-name').innerText = `Hi, ${userData.username}`;
          document.getElementById('user-fullname').innerText = userData.fullname || userData.username;
          document.getElementById('user-bio').innerText = userData.bio || "This is a brief bio about the user.";

          // Fetch the user's posts from the server
          async function fetchUserPosts() {
            try {
              const response = await fetch(`../user/${userData.id}/posts`, {
                method: 'GET',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                }
              });
              const posts = await response.json();
              
              const postsContainer = document.getElementById('timeline-posts');
              postsContainer.innerHTML = ''; // Clear container

              // Loop through posts and create HTML for each post
              posts.forEach(post => {
                  const postElement = document.createElement('div');
                  postElement.classList.add('timeline-post');
                  postElement.innerHTML = `
                      <div class="d-flex">
                        <img src="https://via.placeholder.com/50" alt="User Picture">
                        <div class="post-content">
                          <div class="post-author">${userData.username} <span class="post-date">- ${new Date(post.createdAt).toLocaleDateString()}</span></div>
                          <p>${post.content}</p>
                        </div>
                      </div>
                  `;
                  postsContainer.appendChild(postElement);
              });
            } catch (error) {
              console.error('Error fetching posts:', error);
            }
          }

          // Fetch posts when the page loads
          window.onload = fetchUserPosts;

          // Logout function
          document.getElementById('logout').addEventListener('click', () => {
            localStorage.removeItem('authToken'); // Remove the token
            window.location.href = '/login.html'; // Redirect to login page
          });
        } else {
          // Redirect to login if no token is found
          window.location.href = '/login.html';
        }
    </script>
  </body>
</html>
<!--post default page-->
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Anonymous Tales</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        body {
            background-color: #f8f9fa;
            margin: 0;
            padding: 0;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .navbar {
            position: sticky;
            top: 0;
            z-index: 1000;
            background-color: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .create-post-container {
            position: sticky;
            top: 70px; /* Adjust based on navbar height */
            z-index: 1000;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .posts-container {
            /*overflow-y: auto;*/
            flex-grow: 1;
        }

        .post {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
        }

        .profile-pic {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 15px;
            object-fit: cover;
        }

        .post-content {
            flex-grow: 1;
        }

        .post-author {
            font-weight: bold;
        }

        .post-date, .time-elapsed {
            color: #6c757d;
            font-size: 0.9em;
        }

        .create-post-content textarea {
            width: 100%;
            height: 80px;
            padding: 10px;
            border: none;
            resize: none;
            font-size: 1.1rem;
            outline: none;
        }

        .create-post-content textarea:focus {
            box-shadow: none;
        }

        .create-post-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 10px;
            border-top: 1px solid #e6e6e6;
        }

        .create-post-actions button {
            padding: 6px 12px;
        }

        .create-post-options {
            display: flex;
            align-items: center;
        }

        .create-post-options button {
            background: none;
            border: none;
            cursor: pointer;
            color: #1DA1F2;
            margin-right: 10px;
            font-size: 1.2rem;
        }

        .create-post-options button:hover {
            color: #007bff;
        }


        .read-more {
            cursor: pointer;
            color: #007bff;
            text-decoration: underline;
        }

        .container-fluid {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        #posts-container {
            padding: 10px 0;
            height: calc(100vh - 240px); /* Adjust this value based on navbar and create post height */
            /*overflow-y: scroll;*/
        }
    </style>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

  </head>
  <body>
 <!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-body-tertiary">
  <div class="container">
    <a class="navbar-brand me-2" href="homepage.html">
      <i class="bi bi-journal-bookmark"></i> A.Tales
    </a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarButtonsExample" aria-controls="navbarButtonsExample" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarButtonsExample">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link" href="homepage.html">
            <i class="bi bi-house-door"></i> Home
          </a>
        </li>
        <!-- New Nav Links -->
        <li class="nav-item">
          <a class="nav-link" href="profile.html">
            <i class="bi bi-person"></i> Profile
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="chat.html">
            <i class="bi bi-chat-dots"></i> Chat
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">
            <i class="bi bi-bell"></i> Notifications
          </a>
        </li>
      </ul>
      <div class="d-flex align-items-center">
        <span id="user-name" class="me-3"></span>
        <button id="logout" type="button" class="btn btn-danger">
          <i class="bi bi-box-arrow-right"></i> Logout
        </button>
      </div>
    </div>
  </div>
</nav>

    
    <div class="container mt-4">
      <h2 class="text-center">Latest Posts</h2>

     
      <!-- Post Creation Section  -->
      <div class="create-post-container">
        <img src="https://via.placeholder.com/50" alt="Profile Picture" class="profile-pic">
        <div class="create-post-content">
          <textarea id="post-content" placeholder="Write your story here..." required></textarea>
          <div class="create-post-actions">
            <div class="create-post-options">
              <button><i class="bi bi-image"></i></button> <!-- Icon for Image Upload -->
              <button><i class="bi bi-emoji-smile"></i></button> <!-- Icon for Emoji -->
            </div>
            <button type="submit" class="btn btn-primary" id="post-button">Post</button>
          </div>
        </div>
      </div>

      <!-- Posts Container -->
      <div id="posts-container" class="posts-container">
        <!-- Posts will be rendered here by JavaScript -->
      </div>
      
    </div>

    

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <script>

  
        // Function to decode JWT token
        function parseJwt(token) {
          const base64Url = token.split('.')[1];
          const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
          return JSON.parse(atob(base64));
        }

        // Retrieve the token from localStorage
        const token = localStorage.getItem('authToken');

        if (token) {
          // Decode the token to get user data
          const userData = parseJwt(token);

          // Display the user's username in the navbar
          document.getElementById('user-name').innerText = `Hi, ${userData.username}`;

          // Fetch posts from the server
          async function fetchPosts() {
            try {
                const response = await fetch("../posts", {
                  method: 'GET',
                  headers: {
                    'Authorization': `Bearer ${token}`, // Pass the token for authentication
                    'Content-Type': 'application/json'
                  }
                });
                const posts = await response.json();

                const postsContainer = document.getElementById('posts-container');
                postsContainer.innerHTML = ''; // Clear container

                // Loop through posts and create HTML for each post
                posts.forEach(post => {
                    const postElement = document.createElement('div');
                    postElement.classList.add('post');

                    postElement.innerHTML = `
                        <img src="https://via.placeholder.com/50" alt="Profile Picture" class="profile-pic">
                        <div class="post-content">
                            <div class="post-author">${post.User.username} <span class="post-date">- ${new Date(post.createdAt).toLocaleDateString()}</span></div>
                            <p class="post-text" data-full-text="${post.content}">
                                ${post.content.substring(0, 100)}... <span class="read-more">Read More</span>
                            </p>
                        </div>
                    `;

                    postsContainer.appendChild(postElement);
                });

                // Add event listener for the "Read More" functionality
                document.querySelectorAll('.read-more').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const postText = this.previousSibling.textContent.trim();
                        const fullText = this.parentElement.getAttribute('data-full-text');
                        if (postText.length < fullText.length) {
                            this.previousSibling.textContent = fullText;
                            this.textContent = 'Read Less';
                        } else {
                            this.previousSibling.textContent = fullText.substring(0, 100) + '... ';
                            this.textContent = 'Read More';
                        }
                    });
                });
            } catch (error) {
                console.error('Error fetching posts:', error);
            }
          }

          // Fetch posts when the page loads
          window.onload = fetchPosts;

          // Logout function
          document.getElementById('logout').addEventListener('click', () => {
            localStorage.removeItem('authToken'); // Remove the token
            window.location.href = '/login.html'; // Redirect to login page
          });

        // Handle post submission
        document.getElementById('post-button').addEventListener('click', async (event) => {
            event.preventDefault();
            const content = document.getElementById('post-content').value;
            
            try {
              const userId = userData.id;
              const response = await fetch('../posts', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({userId,content })
              });
              
              if (response.ok) {
                document.getElementById('post-content').value = ''; // Clear the textarea
                fetchPosts(); // Reload the posts
              } else {
                console.error('Error posting:', response.statusText);
              }
            } catch (error) {
              console.error('Error posting:', error);
            }
          });

        } else {
          // Redirect to login if no token is found
          window.location.href = '/login.html';
        }
    </script>
  </body>
</html>
// Function to handle the "Report" button click
/*function report() {
  document.querySelectorAll('.report').forEach(reportBtn => {
    reportBtn.addEventListener('click', function(event) {
      event.preventDefault(); // Prevent default link behavior

      // Get the post ID and user data
      const postId = this.getAttribute('data-post-id');
      const userData = parseJwt(token); // Assuming you have a function to parse the JWT
      const userId = userData.id; // Extract the user ID

      // Show the Bootstrap modal
      const reportModal = document.getElementById('reportModal')
      reportModal.modal('show');

      // Handle the report confirmation
      document.getElementById('confirmReport').onclick = async function() {
        // Get the selected reason
        const reason = document.getElementById('reportReason').value;

        // Verify that a reason has been chosen
        if (!reason) {
          alert("Please select a reason for reporting.");
          return;
        }

        try {
          // Send a POST request to report the post
          const response = await fetch(`../posts/report`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ postId, userId, reason }) // Pass the reason in the request body
          });

          if (response.ok) {
            alert("Post reported successfully!");
          } else {
            console.error('Error reporting post:', response.statusText);
            alert("Failed to report the post. Please try again later.");
          }
        } catch (error) {
          console.error('Error reporting post:', error);
          alert("An error occurred while reporting the post. Please try again.");
        }

        // Hide the modal after reporting
        $('#reportModal').modal('hide');
      };
    });
  });
}

// Initialize the report function
report();*/

function report() {
  // Get the post ID from the data attribute
  const postId = document.querySelector('.report').getAttribute('data-post-id');
  
  // Get the selected reason for reporting
  const reason = document.getElementById('report-reason').value;

  // Ensure you have the token for authenticated requests
  const token = localStorage.getItem('authToken');

  // Make a request to your backend to report the post
  fetch(`../reportPost/${postId}`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ reason })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert('Post reported successfully');
      // Close the modal
      bootstrap.Modal.getInstance(document.getElementById('reportModal')).hide();
    } else {
      alert('Failed to report the post');
    }
  })
  .catch(error => console.error('Error reporting post:', error));
}